{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "JS",
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n//{\n//    \"topic\": \"CSC_PROJECT2/CSC0002/tele/CAPTEUR_C26388/INFO1\",\n//    \"payload\": \" {\"Info1\":{\"Module\":\"ZB-GW03-V1.2\",\"Version\":\"12.5.0(tasmota)\",\"FallbackTopic\":\"cmnd/DVES_C26388_fb/\",\"GroupTopic\":\"CSC_PROJECT2/cmnd/tasmotas/\"}}\"\n//}\n// 16:28:36.220 MQT: CSC_PROJECT/CSC0001/tele/CAPTEUR_C3EF60/INFO1 = {\"Info1\":{\"Module\":\"ZB-GW03-V1.2\",\"Version\":\"12.5.0(tasmota)\",\"FallbackTopic\":\"cmnd/DVES_C3EF60_fb/\",\"GroupTopic\":\"CSC_PROJECT/CSC0001/cmnd/tasmotas/\"}}\n// 16:28:36.235 MQT: CSC_PROJECT/CSC0001/tele/CAPTEUR_C3EF60/INFO2 = {\"Info2\":{\"WebServerMode\":\"Admin\",\"Ethernet\":{\"Hostname\":\"CAPTEUR-C3EF60-3936-eth\",\"IPAddress\":\"192.168.1.138\"}}}\n// 16:28:36.248 MQT: CSC_PROJECT/CSC0001/tele/CAPTEUR_C3EF60/INFO3 = {\"Info3\":{\"RestartReason\":\"Software reset CPU\",\"BootCount\":6}}\n// CSC_PROJECT2/CSC0002/tele/CAPTEUR_C26388/STATE\n// {\"Time\":\"2023-11-01T20:42:49\",\"Uptime\":\"0T00:05:06\",\"UptimeSec\":306,\"Heap\":139,\"SleepMode\":\"Dynamic\",\"Sleep\":50,\"LoadAvg\":19,\"MqttCount\":1,\"Berry\":{\"HeapUsed\":3,\"Objects\":43}}\n\n\n/** Decoder **/\nvar MQTTPRO  =metadata['topic'];\nvar MQTTPROFILE = MQTTPRO.split('/')[0];\n\nvar topicStatePatternINFO1 = MQTTPROFILE + '/.+/INFO1';\nvar topicStatePatternINFO2 = MQTTPROFILE + '/.+/INFO2';\nvar topicStatePatternINFO3 = MQTTPROFILE + '/.+/INFO3';\n\nvar topicResultPattern = MQTTPROFILE + '/.+/RESULT';\nvar topicStatusPattern = MQTTPROFILE + '/.+/STATUS';\nvar topicSensorPattern = MQTTPROFILE + '/.+/SENSOR';\nvar topicStatePattern  = MQTTPROFILE + '/.+/STATE';\n\n// decode payload to string\n\nvar payloadStr = decodeToJson(payload);\nvar res_attr = {};\nvar res_tele = {};\nvar hasModel = 0;\n\n/** Check MQTT Pattern for Gateway **/\n\nvar topicNamePattern = '.+/(.+)/.+';\nvar topicPattern = MQTTPROFILE + '/(.+)/tele';\n\nif (metadata.topic.match(topicStatePatternINFO1)  != null) {\n    res_attr =  payloadStr.Info1;\n}\nif (metadata.topic.match(topicStatePatternINFO2)  != null) {\n    res_attr =  payloadStr.Info2;\n}\nif (metadata.topic.match(topicStatePatternINFO3)  != null) {\n    res_attr =  payloadStr.Info3;\n}\n\n \n/** Common value **/\n \nvar deviceName = metadata.topic.match(topicNamePattern)[1];\nvar deviceType = 'Zigbee Gateway';\nvar groupName  = 'Zigbee Gateway';\nvar customerName = metadata.topic.match(topicPattern)[1];\n\n\n\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n   customerName: customerName,\n   groupName: groupName,\n   attributes: res_attr\n  \n};\n\nif (metadata.topic.match(topicStatePattern)  != null) {\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n   customerName: customerName,\n   groupName: groupName,\n   telemetry: payloadStr\n};\n}\n\nif (metadata.topic.match(topicResultPattern)  != null) {\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n   customerName: customerName,\n   groupName: groupName,\n   telemetry: payloadStr\n};\n}\n\nif (metadata.topic.match(topicSensorPattern)  != null) {\n    res_attr =  payloadStr;\n    var result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n   customerName: customerName,\n   groupName: groupName,\n   telemetry: res_attr\n  \n};\n}\n \n\n\n/** Helper functions 'decodeToString' and 'decodeToJson' are already built-in **/\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\n\nreturn result;",
      "tbelDecoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName']\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions 'decodeToString' and 'decodeToJson' are already built-in **/\n\nreturn result;",
      "encoder" : null,
      "tbelEncoder" : null
    },
    "debugMode" : true,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "b1268430-77ed-11ee-92d7-c9d101394cdd"
    },
    "name" : "Gateway-Uplink",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}